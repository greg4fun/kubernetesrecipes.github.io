---
/**
 * carousel.astro – v4 (stable)
 * Pure‑CSS endless marquee that works in both dev _and_ production.
 *
 * Props
 *   images    string[]  – required
 *   height    string    – any CSS unit, default "110px"
 *   duration  number    – seconds per full loop, default 30
 */
export interface Props {
  images: string[];
  height?: string;
  duration?: number;
}

const { images = [], height = "110px", duration = 30 } = Astro.props;
---
<style is:inline>
  /*  KEEP INLINE   —  ensures CSS ships with component HTML in production  */

  /* Global keyframes so scoping never breaks the name */
  @keyframes carousel-slide {
    0%   { transform: translateX(0); }
    100% { transform: translateX(calc(-50%)); }
  }

  .carousel {
    overflow: hidden;
    width: 100%;
    /* height comes from the per‑instance CSS custom prop */
    height: var(--carousel-h, 110px);
  }

  .track {
    display: inline-flex;     /* keeps one logical row regardless of wrap */
    gap: 1rem;               /* space between images */
    width: max-content;
    animation: carousel-slide var(--carousel-dur, 30s) linear infinite;
  }

  /* Pause for accessibility */
  .carousel:hover .track,
  .carousel:focus-within .track {
    animation-play-state: paused;
  }

  .track img {
    height: 100%;             /* each image exactly matches carousel height */
    flex: 0 0 auto;           /* prevent shrinking */
    object-fit: cover;
    border-radius: 0.5rem;
  }
</style>

<!-- Duplicate the image set once for seamless wraparound -->
<div
  class="carousel"
  style={`--carousel-dur:${duration}s; --carousel-h:${height};`}
  tabindex="0"
>
  <div class="track">
    {images.map((src) => <img src={src} alt="" loading="lazy" />)}
    {images.map((src) => <img src={src} alt="" aria-hidden="true" />)}
  </div>
</div>
